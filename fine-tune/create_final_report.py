import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import argparse
import textwrap
from sklearn.preprocessing import minmax_scale
import os

def create_summary_table(df, output_path):
    """Creates a clean, sorted, and formatted summary table ready for a paper."""
    # Select and rename columns for clarity
    table_df = df[[
        'Avg_Judge_Overall', 
        'Avg_Cosine_Similarity', 
        'Avg_ROUGE-L', 
        'Avg_Latency_sec'
    ]].copy()
    
    table_df.rename(columns={
        'Avg_Judge_Overall': 'Judge Score (1-10)',
        'Avg_Cosine_Similarity': 'Cosine Sim.',
        'Avg_ROUGE-L': 'ROUGE-L',
        'Avg_Latency_sec': 'Latency (s)'
    }, inplace=True)

    # Sort by the primary metric: Judge Score
    table_df.sort_values(by='Judge Score (1-10)', ascending=False, inplace=True)

    # Format the numbers for readability
    table_df['Judge Score (1-10)'] = table_df['Judge Score (1-10)'].round(2)
    table_df['Cosine Sim.'] = table_df['Cosine Sim.'].round(3)
    table_df['ROUGE-L'] = table_df['ROUGE-L'].round(3)
    table_df['Latency (s)'] = table_df['Latency (s)'].round(1)

    # Add a rank column
    table_df.insert(0, 'Rank', range(1, len(table_df) + 1))
    
    print("\n--- Final Performance Leaderboard ---")
    print(table_df.to_string())

    # Save to a new, clean CSV
    table_df.to_csv(output_path)
    print(f"\n✅ Final summary table saved to: {output_path}")
    return table_df

def create_radar_chart(df, output_path):
    """Creates a radar chart to visualize multi-dimensional performance trade-offs."""
    # Prepare data for radar chart
    metrics = ['Judge Score (1-10)', 'Cosine Sim.', 'ROUGE-L', 'Latency (s)']
    radar_df = df[metrics].copy()

    # Normalize each metric from 0 to 1
    # For latency, lower is better, so we invert the score
    radar_df['Judge Score (1-10)'] = minmax_scale(radar_df['Judge Score (1-10)'])
    radar_df['Cosine Sim.'] = minmax_scale(radar_df['Cosine Sim.'])
    radar_df['ROUGE-L'] = minmax_scale(radar_df['ROUGE-L'])
    # Inverted normalization for latency
    latency_norm = minmax_scale(radar_df['Latency (s)'])
    radar_df['Performance (1/Latency)'] = 1 - latency_norm
    
    # We only need the normalized scores now
    radar_df = radar_df[['Judge Score (1-10)', 'Cosine Sim.', 'ROUGE-L', 'Performance (1/Latency)']]
    labels = radar_df.columns
    num_vars = len(labels)

    # Create angles for the radar chart
    angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()
    angles += angles[:1] # complete the circle

    fig, ax = plt.subplots(figsize=(10, 10), subplot_kw=dict(polar=True))

    # Plot each model's performance
    for i, row in radar_df.iterrows():
        values = row.tolist()
        values += values[:1] # complete the circle
        ax.plot(angles, values, linewidth=2, linestyle='solid', label='\n'.join(textwrap.wrap(i, width=40)))
        ax.fill(angles, values, alpha=0.1)

    # Formatting
    ax.set_yticklabels([])
    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(labels)
    plt.title('Normalized Model Performance Comparison', size=20, y=1.1)
    plt.legend(loc='upper right', bbox_to_anchor=(1.4, 1.1))
    
    plt.savefig(output_path, bbox_inches='tight')
    print(f"✅ Performance radar chart saved to: {output_path}")
    plt.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Create final, paper-ready reports from evaluation summaries.")
    parser.add_argument(
        '--summary_file', 
        type=str, 
        default='final_evaluation_reports/_SUMMARY_REPORT.csv', 
        help="Path to the summary CSV file generated by the evaluation script."
    )
    args = parser.parse_args()

    if not os.path.exists(args.summary_file):
        print(f"Error: Summary file not found at '{args.summary_file}'")
    else:
        summary_df = pd.read_csv(args.summary_file).set_index('Model')
        output_dir = os.path.dirname(args.summary_file)
        
        # Create the table
        final_table = create_summary_table(summary_df, os.path.join(output_dir, 'FINAL_LEADERBOARD.csv'))
        
        # Create the radar chart for the top 5 models for clarity
        create_radar_chart(final_table.head(5), os.path.join(output_dir, 'FINAL_RADAR_CHART.png'))